from gamegym.algorithms import BestResponse, OutcomeMCCFR, exploitability
from gamegym.games import Goofspiel
from gamegym.algorithms.valuesgd import GoofSpielCardsValueStore, SparseStochasticValueLearning
import numpy as np
import matplotlib.pyplot as plt

import sys
sys.setrecursionlimit(100000)
import logging
logging.basicConfig(level=logging.INFO)

def main():
    N = 4
    g = Goofspiel(N, scoring=Goofspiel.Scoring.ZEROSUM)
    mc = OutcomeMCCFR(g, seed=56)

    its = 100.0
    while its < 1000000:
        fname = "goof-{}-{}.strat".format(N, its)
        mc.persist(fname, iterations=iterations=int(its) - mc.iterations)
        its *= 2 ** 0.5
        print("Exploitability after {:7d} turns (mc, g): {}, {}".format(
            int(its), exploitability(g, 0, mc), exploitability(g, 1, mc)))
    assert 0
    vs = GoofSpielCardsValueStore(g)
    vl = SparseStochasticValueLearning(g, vs, seed=41)
    vals = np.concatenate([
        vl.compute([mc, mc], 1000, alpha=0.01, store_step=1),
        vl.compute([mc, mc], 1000, alpha=0.001, store_step=1),
        vl.compute([mc, mc], 1000, alpha=0.0001, store_step=1),
    ], axis=0)
    plt.plot(vals)
    plt.show()

    print("Values:", vs.values)

    g2 = Goofspiel(N, scoring=Goofspiel.Scoring.ZEROSUM, rewards=vs.values)
    mc2 = OutcomeMCCFR(g2, seed=57)
    mc2.compute(iterations=ITERS)
    print("Exp(mc2, g2)", exploitability(g2, 0, mc2), exploitability(g2, 1, mc2))
    print("Exp(mc2, g)", exploitability(g, 0, mc2), exploitability(g, 1, mc2))


if __name__ == '__main__':
    main()
