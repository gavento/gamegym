from gamegym.algorithms import BestResponse, OutcomeMCCFR, exploitability
from gamegym.games import Goofspiel
from gamegym.games.goofspiel import goofspiel_feaures_cards
from gamegym.value_learning.valuesgd import SparseSGDLinearValueLearning
from gamegym.value_learning.valuestore import LinearValueStore
from gamegym.algorithms.infosets import InformationSetSampler
import numpy as np
import matplotlib.pyplot as plt

import sys
sys.setrecursionlimit(100000)
import logging
logging.basicConfig(level=logging.INFO)

def main():
    N = 5
    ITERS = 10000000
    g = Goofspiel(N, scoring=Goofspiel.Scoring.ZEROSUM)
    mc = OutcomeMCCFR(g, seed=56)

    its = 1024
    while its < ITERS:
        fname = "goof-{}-{}.strat".format(N, int(its))
        cached = mc.persist(fname, iterations=int(its) - mc.iterations)
        if not cached: 
            print("Exploitability after {:7d} turns (mc, g): {}, {}".format(
                int(its), exploitability(g, 0, mc), exploitability(g, 1, mc)))
        its *= 2
    infosampler = InformationSetSampler(g, mc)

    for i, its in enumerate([1, 3, 10, 30]):
        vs = LinearValueStore(goofspiel_feaures_cards(g.initial_state()), fix_mean=(N + 1) / 2.0)
        vl = SparseSGDLinearValueLearning(g, goofspiel_feaures_cards, vs, infosampler, seed=41)
        vals = np.concatenate([
            #vl.compute([mc, mc], 2000, step=0.1, record_every=1),
            vl.compute([mc, mc], 5000, step=s, record_every=1,
                val_samples=its, grad_samples=its)
                for s in [2**-8, 2**-9, 2**-10, 2**-11]
        ], axis=0)
        plt.plot(vals, color=['red', 'green', 'blue', 'black'][i])
        print("Done samples={}".format(its))
    plt.show()

    print("Values:", vs.values)

    return 

    g2 = Goofspiel(N, scoring=Goofspiel.Scoring.ZEROSUM, rewards=vs.values)
    mc2 = OutcomeMCCFR(g2, seed=57)
    mc2.compute(iterations=ITERS)
    print("Exp(mc2, g2)", exploitability(g2, 0, mc2), exploitability(g2, 1, mc2))
    print("Exp(mc2, g)", exploitability(g, 0, mc2), exploitability(g, 1, mc2))


if __name__ == '__main__':
    main()
